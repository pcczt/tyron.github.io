<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tyron blog</title>
  
  <subtitle>人若无名，专心练剑。&lt;br /&gt;剑成之后，自然诸事皆顺。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tyronblog.com/"/>
  <updated>2019-03-13T12:48:12.000Z</updated>
  <id>http://tyronblog.com/</id>
  
  <author>
    <name>tyron chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot与日志</title>
    <link href="http://tyronblog.com/2019/03/03/spring-boot-log/"/>
    <id>http://tyronblog.com/2019/03/03/spring-boot-log/</id>
    <published>2019-03-03T15:06:31.000Z</published>
    <updated>2019-03-13T12:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>日志框架、日志配置<br><a href="https://github.com/tyronczt/spring-boot-learning/tree/master/spring-boot-03-logging" target="_blank" rel="noopener">示例代码</a><br><a id="more"></a></p><h3 id="一、日志框架"><a href="#一、日志框架" class="headerlink" title="一、日志框架"></a>一、日志框架</h3><p>市场上存在非常多的日志框架。 JUL（java.util.logging），JCL（Apache Commons Logging），Log4j，Log4j2，<u>Logback</u>、 <u>SLF4j</u>、 jboss-logging等。<br>Spring Boot在框架内容部使用JCL，spring-boot-starter-logging采用了 <strong>SLF4j 和 Logback</strong> 的形式，Spring Boot也能自动适配（jul、 log4j2、 logback） 并简化配置 。</p><p><img src="https://raw.githubusercontent.com/tyronczt/spring-boot-learning/master/images/spring-boot-log-classification.png" alt="spring-boot-log-classification"></p><h3 id="二、SLF4j的使用"><a href="#二、SLF4j的使用" class="headerlink" title="二、SLF4j的使用"></a>二、SLF4j的使用</h3><h4 id="2-1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#2-1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="2.1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>2.1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h4><p>开发过程中，日志记录方法的调用，不应该直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>项目中导入 SLF4j 和 Logback 的jar包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/tyronczt/spring-boot-learning/master/images/spring-boot-log-concrete-bindings.png" alt="spring-boot-log-concrete-bindings"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是使用日志实现框架自己本身的配置文件；</strong></p><h4 id="2-2、遗留问题"><a href="#2-2、遗留问题" class="headerlink" title="2.2、遗留问题"></a>2.2、遗留问题</h4><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="https://raw.githubusercontent.com/tyronczt/spring-boot-learning/master/images/spring-boot-log-legacy.png" alt="spring-boot-log-legacy"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>1、将系统中其他日志框架先排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、我们导入slf4j其他的实现</p><h3 id="三、SpringBoot日志关系"><a href="#三、SpringBoot日志关系" class="headerlink" title="三、SpringBoot日志关系"></a>三、SpringBoot日志关系</h3><p>SpringBoot中的日志实现： <code>spring-boot-starter</code>  中的  <code>spring-boot-starter-logging</code> 实现</p><p>SpringBoot版本：2.1.3.RELEASE 结构图：</p><p><img src="https://raw.githubusercontent.com/tyronczt/spring-boot-learning/master/images/spring-boot-start-logging.png" alt="spring-boot-start-logging"></p><p>总结：</p><p>1）、SpringBoot底层也是使用<strong>slf4j+logback</strong>的方式进行日志记录</p><p>2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>3）、中间替换包？</p><p>​    举例：在jul-to-slf4j中均是使用 SLF4J 的实现类，log4j-to-slf4j也是如此</p><p>4）如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>Spring框架用的是commons-logging；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</p><h3 id="四、日志使用"><a href="#四、日志使用" class="headerlink" title="四、日志使用"></a>四、日志使用</h3><h4 id="4-1、默认配置"><a href="#4-1、默认配置" class="headerlink" title="4.1、默认配置"></a>4.1、默认配置</h4><p>SpringBoot默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的级别；</span></span><br><span class="line">    <span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">    <span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">    logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">    <span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">    logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">    logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出</span><br><span class="line">INFO <span class="number">7644</span> --- [  main] .t.s.SpringBoot03LoggingApplicationTests : 这是info日志...</span><br><span class="line">WARN <span class="number">7644</span> --- [  main] .t.s.SpringBoot03LoggingApplicationTests : 这是warn日志...</span><br><span class="line">ERROR <span class="number">7644</span> --- [  main] .t.s.SpringBoot03LoggingApplicationTests : 这是error日志...</span><br></pre></td></tr></table></figure><p>修改SpringBoot的默认日志配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.tyron = trace</span><br><span class="line">#logging.path=</span><br><span class="line"># 不指定路径在当前项目下生成springboot.log日志</span><br><span class="line"># 可以指定完整的路径；</span><br><span class="line">#logging.file=D:/springboot.log</span><br><span class="line"></span><br><span class="line"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">   --&gt;</span><br><span class="line">   %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h4 id="4-2、指定配置"><a href="#4-2、指定配置" class="headerlink" title="4.2、指定配置"></a>4.2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><p>When possible, we recommend that you use the <code>-spring</code> variants for your logging configuration (for example, <code>logback-spring.xml</code> rather than <code>logback.xml</code>). If you use standard configuration locations, Spring cannot completely control log initialization.  —来自官方文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3、切换日志框架"><a href="#4-3、切换日志框架" class="headerlink" title="4.3、切换日志框架"></a>4.3、切换日志框架</h4><p>切换为 slf4j+log4j 的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换为 slf4j+log4j2的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日志框架、日志配置&lt;br&gt;&lt;a href=&quot;https://github.com/tyronczt/spring-boot-learning/tree/master/spring-boot-03-logging&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;示例代码&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="springboot" scheme="http://tyronblog.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 配置</title>
    <link href="http://tyronblog.com/2019/02/23/spring-boot-config/"/>
    <id>http://tyronblog.com/2019/02/23/spring-boot-config/</id>
    <published>2019-02-23T15:06:31.000Z</published>
    <updated>2019-02-24T15:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>讲解 Spring Boot 的配置文件<br><a id="more"></a></p><h3 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h3><p>Spring Boot使用一个全局的配置文件</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件放在<code>src/main/resources</code>目录或者类路径 /config 下</p><p><strong>yml </strong>是 <strong>YAML</strong>（YAML Ain’t Markup Language）语言的文件，以数据为中<br>心，比 json、xml 等更适合做配置文件</p><p><a href="http://www.yaml.org/" target="_blank" rel="noopener">http://www.yaml.org/</a> 参考语法规范</p><p>全局配置文件的可以对一些默认配置值进行修改</p><p>YAML ： 配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML ：配置例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h3><h4 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h4><ul><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用<strong>空格</strong></li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>大小写敏感</li></ul><h4 id="2、YAML-支持的三种数据结构"><a href="#2、YAML-支持的三种数据结构" class="headerlink" title="2、YAML 支持的三种数据结构"></a>2、YAML 支持的三种数据结构</h4><ul><li>字面量：单个的、不可再分的值</li><li>对象：键值对的集合</li><li>数组：一组按次序排列的值</li></ul><h5 id="2-1、字面量"><a href="#2-1、字面量" class="headerlink" title="2.1、字面量"></a>2.1、字面量</h5><ul><li>数字、字符串、布尔、日期</li><li>字符串<ul><li>默认不使用引号</li><li>可以使用单引号或者双引号，单引号会转义特殊字符，双引号不会转义</li><li>字符串可以写成多行，从第二行开始，必须有一个单空格缩进，换行符会被转为空格。</li></ul></li></ul><p>name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h5 id="2-2、对象（Map）"><a href="#2-2、对象（Map）" class="headerlink" title="2.2、对象（Map）"></a>2.2、对象（Map）</h5><ul><li>对象的一组键值对，使用冒号分隔。如：username: admin</li><li>冒号后面跟<strong>空格</strong>来分开键值</li><li>{k: v}是行内写法</li></ul><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;name:</span> <span class="string">xiaoming,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="2-2、数组（List、Set）："><a href="#2-2、数组（List、Set）：" class="headerlink" title="2.2、数组（List、Set）："></a>2.2、数组（List、Set）：</h5><p>一组连词线（-）开头的行，构成一个数组，[]为行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h4 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h4><p>注入类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *       prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    </span><br><span class="line">    getter/setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yaml配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">xiaoming</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2010</span><span class="string">/01/01</span></span><br><span class="line"><span class="attr">  maps:</span></span><br><span class="line"><span class="attr">    hello:</span> <span class="string">world</span></span><br><span class="line"><span class="attr">    say:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">  lists:</span> <span class="string">[dog,cat,pig]</span></span><br><span class="line"><span class="attr">  animal:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">xiaohuang</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'xiaoming'</span>, age=<span class="number">18</span>, boss=<span class="keyword">true</span>, birth=Fri Jan <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2010</span>, maps=&#123;hello=world, say=hello&#125;, lists=[dog, cat, pig], animal=Animal&#123;name=<span class="string">'xiaohuang'</span>, age=<span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲解 Spring Boot 的配置文件&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="springboot" scheme="http://tyronblog.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 入门</title>
    <link href="http://tyronblog.com/2019/02/20/spring-boot-quick-start/"/>
    <id>http://tyronblog.com/2019/02/20/spring-boot-quick-start/</id>
    <published>2019-02-20T15:04:02.000Z</published>
    <updated>2019-02-24T15:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用spring boot非常适合构建微服务。<br><a id="more"></a></p><h3 id="Spring-Boot-—-BUILD-ANYTHING"><a href="#Spring-Boot-—-BUILD-ANYTHING" class="headerlink" title="Spring Boot — BUILD ANYTHING"></a>Spring Boot — BUILD ANYTHING</h3><blockquote><p>Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring. Spring Boot takes an opinionated view of building production-ready applications.</p></blockquote><p>Spring Boot旨在尽可能快地启动和运行，只需最少的Spring前端配置。 Spring Boot对构建面向生产的应用程序有独到的观点。</p><h3 id="Spring-Boot-的优势"><a href="#Spring-Boot-的优势" class="headerlink" title="Spring Boot 的优势"></a>Spring Boot 的优势</h3><ul><li><p><strong>良好的基因</strong></p><p>SpringBoot是伴随着Spring 4.0而生的，boot是引导的意思，也就是它的作用其实就是在于帮助开发者快速的搭建Spring框架，因此SpringBoot继承了Spring优秀的基因，在Spring中开发更为方便快捷。</p></li><li><p><strong>简化编码</strong></p><p>配合各种starter使用，基本上可以做到自动化配置</p></li><li><p><strong>简化配置</strong></p><p>Spring Boot摈弃了繁琐的xml配置文件，大量的配置文件经常是导致生产事故的原因。Spring Boot大量采用yml形式的配置文件再加上相应的Annotation，从而大大减少了配置文件的个数，因为以前的Spring应用引入一个第三方框架说不定就要添加一个配置文件。</p></li><li><p><strong>简化部署</strong></p><p>Spring Boot天生就是为了简单、快捷部署而生。SpringBoot内嵌了Tomcat，不需要额外部署应用服务器Tomcat，只需简单一个Java运行环境即可，而且启动的命令也非常简单：java –jar xxx-release.jar。同时Spring Boot结合现在非常火的技术 Docker、Kubernetes可以快速实现集群部署。</p></li><li><p><strong>简化监控</strong></p><p>Spring Boot集成了非常高效的监控框架，只要简单引入对spring-boot-start-actuator的依赖，就可以实现对服务性能的监控。结合Spring Cloud就可以实现对整个微服务链路的全天候监控。</p></li></ul><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p>在开始Spring Boot开发之前，需要先确认您的电脑上已经有以下环境：</p><ul><li>JDK 8</li><li>Maven 3.0+</li><li>Intellij IDEA</li></ul><h4 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-<span class="number">01</span>-helloworld</span><br><span class="line">com</span><br><span class="line">  +- tyron</span><br><span class="line">      +- HelloWorldMainApplication.java</span><br><span class="line">      |</span><br><span class="line">      +- controller</span><br><span class="line">      |  +- HelloController.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure><h4 id="引入web模块"><a href="#引入web模块" class="headerlink" title="引入web模块"></a>引入web模块</h4><p>pom.xml中添加支持web的模块：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="编写一个主程序"><a href="#编写一个主程序" class="headerlink" title="编写一个主程序"></a>编写一个主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写相关的Controller"><a href="#编写相关的Controller" class="headerlink" title="编写相关的Controller"></a>编写相关的Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行主程序"><a href="#运行主程序" class="headerlink" title="运行主程序"></a>运行主程序</h4><p>启动主程序，打开浏览器访问<a href="http://localhost:8080/hello，就可以看到效果了！" target="_blank" rel="noopener">http://localhost:8080/hello，就可以看到效果了！</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用spring boot非常适合构建微服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用spring boot非常适合构建微服务。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="springboot" scheme="http://tyronblog.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>2018年仅剩最后一个月了</title>
    <link href="http://tyronblog.com/2018/12/07/monthlyRecording-Nov/"/>
    <id>http://tyronblog.com/2018/12/07/monthlyRecording-Nov/</id>
    <published>2018-12-06T17:11:00.000Z</published>
    <updated>2018-12-06T17:18:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>以输出倒逼输入（Output-Push-Input Learning）<br><a id="more"></a></p><p>不知你是否有这样的感受：时间过得很快，越来越不耐用。静静回想，这样的感受越来越强烈，一晃眼2018年马上就要结束了，仿佛昨日还是2017，但是2019马上就要到来了！</p><p>从四月份开始写月季，不知不觉这已经是第九篇了，这或许能让时间流的慢一些吧，或许能让时间稍微沉淀点东西下来吧，或许这也是空虚心灵的稍许慰藉，但是显然写写<code>月季</code>并不能让自己得到真正的成长，下面便讲讲或许能让自己真正成长的东西：<strong>输出</strong>。</p><p>在朋友圈中，有朋友分享了他们公司的读书分享计划，即公司按员工需求采购一批技术书籍，并制定阅读人及分享时间，在阅读完后以PPT、思维导图等形式分享给大家，我觉得这是一个技术公司所具备的优秀品质。</p><p>每周五晚都会看小马哥<code>mercyblitz</code>（Apache Dubbo PPMC、Spring Cloud 孵化项目组成员)的免费直播视频，分享他的技术周报，虽然每次听得并不大懂，但是从中更学到一句话：直播倒逼输入。</p><p>上面两个身边的栗子，都是输出式的学习方式，更确切的说是：<a href="https://www.jianshu.com/p/5aea7cabc642" target="_blank" rel="noopener"><strong>以输出倒逼输入</strong>（Output-Push-Input Learning）</a>。下面说说我的输入、以及输出：</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><ul><li><strong>阅读式输入</strong>：利用下班后及周末时间，阅读技术书籍，形成技术体系；利用等电梯、排队等碎片化时间浏览公众号文章，分散的去获取别人总结的点点。</li><li><strong>音频式输入</strong>：主要是看慕课网中的项目实战视频以及技术块的讲解，以及技术直播（如腾讯课堂的，广告较多，可以稍微看看）</li><li><strong>其他形式输入</strong>：参加技术讲座（公司内的或者公司外的）等等。</li></ul><blockquote><p>小结</p></blockquote><p>输入的本质是学习，它是多维度、多方位、多时段的刺激，只有更多的输入才能确保自己高质量的输出。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><strong>输出，就是定输出的具体目标，俗称“树靶子”。</strong>这里分三步走：</p><h5 id="1-1-确认总目标（树干）"><a href="#1-1-确认总目标（树干）" class="headerlink" title="1.1 确认总目标（树干）"></a>1.1 确认总目标（树干）</h5><p>技术方向：成为一名优秀的架构师。</p><h5 id="1-2-确认分目标（树枝）"><a href="#1-2-确认分目标（树枝）" class="headerlink" title="1.2 确认分目标（树枝）"></a>1.2 确认分目标（树枝）</h5><p>对于“成为架构师”这个目标而言，可以细分成许多具体目标，例如：</p><ul><li>每周四篇原创</li><li>GitHub不间断更新</li><li>leetcode每周2题</li><li>扎实技术基础</li><li>。。。</li></ul><h5 id="1-3-梳理隐性输出（树根）"><a href="#1-3-梳理隐性输出（树根）" class="headerlink" title="1.3 梳理隐性输出（树根）"></a>1.3 梳理隐性输出（树根）</h5><p>勤于总结与梳理，将工作、生活、学习中的经验积累通过写作的方式梳理，这便是又一次的将自己的思想归纳总结。</p><blockquote><p>小结</p></blockquote><p>输出的本质是将大目标细化为小目标，以量化和可视化的形式展现。输出的方式有很多，主要有发视频、发图片、发文字、发声音等，适合自己的才是最好的。</p><hr><p><strong>又到了回顾和展望环节</strong>：</p><h4 id="上月目标回顾"><a href="#上月目标回顾" class="headerlink" title="上月目标回顾"></a>上月目标回顾</h4><ul><li>CSDN博客原创5篇，其中一篇只有开头，加上转载一篇，勉强完成；</li><li>项目推进稳步完成；</li><li>广州游记大纲完成</li></ul><p><strong>回顾总结：</strong></p><p>及格，博客质量有待提高！</p><h4 id="本月目标"><a href="#本月目标" class="headerlink" title="本月目标"></a>本月目标</h4><p><strong>有了明确的目标，才会有行动的方向和动力。</strong></p><ul><li>CSDN原创4篇，保质保量；</li><li>leetcode每周2题，提交GitHub；</li></ul><p>记录—看到一个更好的自己，tyron十一月记！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以输出倒逼输入（Output-Push-Input Learning）&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
      <category term="月记" scheme="http://tyronblog.com/tags/%E6%9C%88%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>碌碌无为的八月</title>
    <link href="http://tyronblog.com/2018/09/17/monthlyRecording-Aug/"/>
    <id>http://tyronblog.com/2018/09/17/monthlyRecording-Aug/</id>
    <published>2018-09-16T16:12:22.000Z</published>
    <updated>2019-02-19T11:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>越拖延，越自责；越自责，越拖延。<br><a id="more"></a><br>到了月中才把每月总结提上日程，唯重度拖延症患者而能为之。赶紧补上，再不写，真的就没机会写了！！！</p><p>八月关键词：<strong>碌碌无为</strong>、<strong>重度拖延症</strong>、<strong>装机</strong>。</p><h3 id="碌碌无为"><a href="#碌碌无为" class="headerlink" title="碌碌无为"></a>碌碌无为</h3><p>八月基本就是做一天和尚撞一天钟，拖拖踏踏的完成着交给我的工作，踩着点上下班。</p><p>流水账式描述下八月的一天：早起洗刷，坐地铁转公交到公司，上班；中午吃饭休息，上班，准点下班，回家后吃饭跑步，洗澡睡觉。</p><p>平平淡淡的一天过去了，生活少了些动力，一个月也就这样过去了，最后回想起来感慨的多，收获、沉淀的少。</p><p>简单复盘：</p><p>1）为什么会进入这种不上进的状态？</p><p>答：工作进入稳定期，没有了活力，工作变成摸鱼。上下班出行时间较长，相对较累，给自己找偷懒的理由。</p><p>2）如何进行改进，怎么改变这种状态？</p><p>答：发现问题所在，对症下药。将上下班出行的时间充分利用起来，而不是看新闻看无用视频，多看看与工作相关的文章，提高自己英语水平；上班拿出十二分的激情，吃亏是福。</p><p>3）下一步的目标？</p><p>答：将根治拖延症提上日程，逐步治愈拖延症。</p><h3 id="重度拖延症"><a href="#重度拖延症" class="headerlink" title="重度拖延症"></a>重度拖延症</h3><p>作为一个重度拖延症患者，先举几个自己生活中的几个例子吧：①工作中很多情况下都会在工作在最后期限的日期完成，甚至超出最后期限；②生活中就拿我写月记这个事来说，本来定在月初2号完成的，但是拖到现在月中还没完成。。。</p><p>作为本身慢性子的我而言，拖延症也显得合情合理，但是现在越来越发现拖延症已经成为我个人发展路上的一块绊脚石。下面是一些我结合网上观点和自我理解的药方：</p><p>1）深刻理解“拖延症”对自己的影响</p><p>想“治病”必须先知道自己“得病”，如果没觉得它对自己有影响，那也就没有后面改变的必要了。如果觉得自己有拖延症，而且想改变它，那接着看后面的内容，希望对你我都有帮助。</p><p>2）制定deadline，给自己定一个最后期限</p><p>制定deadline是相对于周期较长的事情而言的，在有原先时间计划的基础上，适当提前一小时或者提前一天去完成这个事，比如，写月记的事完全可以放在月末就可以完成了，没有必要一定到月初去完成。</p><p>3）现在，立刻，马上</p><p>想到的事马上付诸行动。懒，总是从第一秒开始，有了第一秒，就会有第一分钟，第一小时，第五小时，最后一天过去了，毛都没干。</p><p>4）减少对手机的依赖</p><p>朋友圈、微博、短视频、手游…总有那么多吸引你的地方。推荐一下“<strong>潮汐</strong>”这款软件。</p><p>5）踏出第一步</p><p>凡是你所拖延的，都是内心深处不喜欢做的。想想当初你选择这件事的初衷是什么？借用“[巴赫爱喝胡辣汤]”的公式：<strong>“我选择做XXX，因为我想得到XXX。”</strong></p><p>“我选择写月记，因为我想提升自己。”</p><p>“我选择加班工作，因为我想升职加薪。”</p><p>……</p><p>追本溯源，寻求事情本质，<strong>现在，立刻，马上踏出第一步！！！</strong></p><h3 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h3><p>上个月用了下个月的研究时间加上一个星期的装机时间，终于将属于自己的台式机组装好了，很有成就感！</p><p><img src="http://img.tyronblog.com/DIY%E5%8F%B0%E5%BC%8F%E7%94%B5%E8%84%91.png" alt="DIY台式电脑"></p><p>有兴趣的朋友可以留言或者私信交流，最后配好的价格5000多了一点点。</p><h3 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h3><p><a href="https://blog.csdn.net/tian330726/article/details/81536129" target="_blank" rel="noopener">初学Java虚拟机（一）：Java技术体系</a></p><p><a href="https://blog.csdn.net/tian330726/article/details/81558703" target="_blank" rel="noopener">初学Java虚拟机（二）：Java内存区域</a></p><p><a href="https://blog.csdn.net/tian330726/article/details/81626085" target="_blank" rel="noopener">初学Java虚拟机（三）：虚拟机对象</a></p><p><a href="https://blog.csdn.net/tian330726/article/details/81663646" target="_blank" rel="noopener">初学Java虚拟机（四）：OutOfMemoryError异常</a></p><p>初学Java虚拟机（五）：垃圾收集器[待完成]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越拖延，越自责；越自责，越拖延。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
      <category term="月记" scheme="http://tyronblog.com/tags/%E6%9C%88%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>七月二三事</title>
    <link href="http://tyronblog.com/2018/08/12/monthlyRecording-July/"/>
    <id>http://tyronblog.com/2018/08/12/monthlyRecording-July/</id>
    <published>2018-08-12T11:55:15.000Z</published>
    <updated>2018-08-12T12:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>不读书的人，看到的只有别人描绘给他的美好世界。<br>读了书之后，你拥有了辨别现今社会黑暗和丑陋的能力，就会变得丧气。<br>只有读了更多书之后，你就站在了巨人的肩上，看到了希望和光明。<br><a id="more"></a></p><p>时间如夏日的风扇，一圈一圈转的飞快，转眼七月已过，八月伴随着阵阵热浪走近了我们。</p><p>随着工作步入正轨，渐渐的习惯了新公司的开发氛围与工作模式，生活也渐渐有规律性了：</p><h3 id="事一：跑步"><a href="#事一：跑步" class="headerlink" title="事一：跑步"></a>事一：跑步</h3><p>俗话说：身体是革命的本钱。现在人普遍的状态就是：年轻时身体换金钱，年老时金钱换时间。现在绝大部分的人都是亚健康体质，当然也包括我在内。</p><p>下班吃完饭一小时后，花半个小时左右的时间用来跑步，沿着小区边上的小河，跑上两三圈。汗水湿透衣服，将一天的劳累随着一个温水澡统统都冲洗掉。</p><p>“坚持”：万事贵在<code>坚持</code>，跑步也不例外。从7月12日开始跑步至今，总共跑了十八次，由于出差、搬家、天气的原因中间断了些日子，但是中间偷懒了一天。<code>偷懒</code>是会成习惯的，也不要给自己的<code>偷懒</code>找理由。</p><h3 id="事二：游戏"><a href="#事二：游戏" class="headerlink" title="事二：游戏"></a>事二：游戏</h3><p>小玩怡情，大玩伤时也伤心。不知道看到这篇文章的你是不是也和我一样：手游卸了装，装了卸，不下十次。自制力不强的我好几次都有系统自动提示“您连续玩游戏的时长已达到8小时”，整整一天的空闲时间都花在了游戏上，反观回来，这么宝贵的青春年华都花在游戏上，游戏过后什么也没学到，于是便把它卸了，眼不见心不烦。</p><p>对于<code>游戏</code>，我也有自己的观点和看法：电子游戏是社会进步的bug。先说说电子竞技的好处：</p><ul><li>电子竞技可以丰富我们的课外生活，可以和学习、生活等相辅相成、互补长短；</li><li>电子竞技有益于智力的增长；</li><li>电子竞技运动是可以锻炼我们的意志，培养团队精神；</li></ul><p>也正是有这些原因的存在，电子竞技也出现在了亚运会的舞台上。但是电子竞技的弊端也很明显：</p><ul><li>在社会的外部环境中，中国的整个电子竞技产业正处于一个不规范、混乱的状态，我们缺乏相应的法律法规以及配套的监督管理制度 ；</li><li>在校园的内部环境中，很多学生都没有形成正确的游戏观念，还不能正确处理电子竞技中的游戏性和经济性之间的关系，学生往往不能够领会到电子竞技中的体育精神，而他们更多的是把精力集中在电子竞技的娱乐性上； </li></ul><p>现实生活中，很多未成年人因为沉迷游戏，发生很多我们不愿看到的事情，希望社会的发展能推动游戏体质的健全，推动教育在游戏领域的普及，尽快尽好的修复好这个bug。</p><h3 id="事三：开发相关"><a href="#事三：开发相关" class="headerlink" title="事三：开发相关"></a>事三：开发相关</h3><ul><li>继续<code>校园店铺</code>项目：<a href="https://blog.csdn.net/tian330726/article/details/80878536" target="_blank" rel="noopener">SSM到Spring Boot从零开发校园商铺平台—4、店铺注册功能模块（二）</a></li><li><a href="https://blog.csdn.net/tian330726/article/details/80919910" target="_blank" rel="noopener">CentOS 7.2下yum安装MySQL5.7</a></li><li><a href="https://blog.csdn.net/tian330726/article/details/81122248" target="_blank" rel="noopener">三个带你超神的Windows软件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不读书的人，看到的只有别人描绘给他的美好世界。&lt;br&gt;读了书之后，你拥有了辨别现今社会黑暗和丑陋的能力，就会变得丧气。&lt;br&gt;只有读了更多书之后，你就站在了巨人的肩上，看到了希望和光明。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
      <category term="月记" scheme="http://tyronblog.com/tags/%E6%9C%88%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>写在七月的六月</title>
    <link href="http://tyronblog.com/2018/07/04/monthlyRecording-Jun/"/>
    <id>http://tyronblog.com/2018/07/04/monthlyRecording-Jun/</id>
    <published>2018-07-04T12:43:03.000Z</published>
    <updated>2018-07-04T13:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，时间过得飞快，细细想来，却发现发生挺多，这便是记录的意义吧。<br><a id="more"></a></p><h2 id="出差归来"><a href="#出差归来" class="headerlink" title="出差归来"></a>出差归来</h2><p>经历了两个月零一个星期的出差，结束了宁波的项目出差之行。连续的出差也渐渐加深了对生活的理解：生活对每个人都是公平的，这里的每个人不包含极少数含着金汤匙的人，因为他们不具有可比性；平凡的我们唯有不断不断的学习、努力才能不被社会抛弃，才能过上自己想要的生活。在自己觉得生活苦，日子累的时候，想想我们身边还有很多人生活更苦更累，但是还没我们过得惬意；想想身边成功的人，他们也不是随随便便成功的，他们在背后也付出了巨大的艰辛和汗水。过好自己生活的每一天，和昨天的自己比一比 ，是否进步了一点点。</p><h2 id="博客服务器更换"><a href="#博客服务器更换" class="headerlink" title="博客服务器更换"></a>博客服务器更换</h2><p>之前买的三个月的阿里云服务器到期了，参加阿里云前段时间的活动（1核2G内存1M宽带三年￥279），放一个静态博客已经绰绰有余了，由于之前的文章，没有详细的hexo博客部署教程，所以又重新写了一遍，按照实际操作步骤记录，分分钟自己搭建一个博客- - - -<a href="https://blog.csdn.net/tian330726/article/details/80791388" target="_blank" rel="noopener">centos服务器部署hexo（简版）</a></p><h2 id="项目继续更新"><a href="#项目继续更新" class="headerlink" title="项目继续更新"></a>项目继续更新</h2><p><a href="https://blog.csdn.net/tian330726/article/details/79681574" target="_blank" rel="noopener">SSM到Spring Boot从零开发校园商铺平台</a>项目最新更新日期是4月16日，出差缘故未能及时更新，接下来也将会继续更新，附上最新更新文章：<br><a href="https://blog.csdn.net/tian330726/article/details/80878536" target="_blank" rel="noopener">SSM到Spring Boot从零开发校园商铺平台—4、店铺注册功能模块（二）</a></p><h2 id="微信公众号“信息流”"><a href="#微信公众号“信息流”" class="headerlink" title="微信公众号“信息流”"></a>微信公众号“信息流”</h2><p>IOS版本，6月20日新版本更新，更新内容介绍：可以直接浏览订阅号的消息。这里先不说“微信”这个软件的成功之处，毕竟它的用户量在那里放着了，但是这次的改版个人而言并不习惯。这次的改版相对于公众号而言应该是第二次大的调整，上次是将公众号折叠，这次是将公众号转为流。参照着抖音无限下拉的视频流，让用户可以一直沉浸其中，也是这个原因，我手机中至今也没有装过抖音。为什么要按照时间将无关联的文章排列，是为了更加适应这个快阅读的时代吗？还是为了让用户看到更有用的文章，将不看的公众号取关？不得而知，时间可以证明这一切。</p><h2 id="读了一本无用之书"><a href="#读了一本无用之书" class="headerlink" title="读了一本无用之书"></a>读了一本无用之书</h2><blockquote><p>梁文道在《悦己》中说道：<br>读一些无用的书，做一些无用的事，花一些无用的时间，都是为了在一切已知之外，保留一个超越自己的机会，人生中一些很了不起的变化，就是来自这种时刻。</p></blockquote><p>无用之书的书名叫《朋友圈的尖子生》，特别感谢【虎眼旁观】公众号作者郭小虎赠送此书。虽然书名有点俗气，但是讲得倒挺真切。<br>看了几个故事，都是以你问我答的形式展开，鸡汤没那么浓，比较符合贴近生活，又高于生活，睡前看一看，躺下想一想，想想所谓的成功人士是怎么便成功的。</p><p>最后以一位豆友的评论结束本月笔记：<br>  <strong>好看的皮囊千篇一律，有趣的灵魂万里挑一！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉，时间过得飞快，细细想来，却发现发生挺多，这便是记录的意义吧。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
      <category term="月记" scheme="http://tyronblog.com/tags/%E6%9C%88%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SSM到Spring Boot从零开发校园商铺平台---4、店铺注册功能模块（二）</title>
    <link href="http://tyronblog.com/2018/07/01/ssm2boot4/"/>
    <id>http://tyronblog.com/2018/07/01/ssm2boot4/</id>
    <published>2018-07-01T15:04:58.000Z</published>
    <updated>2019-02-19T11:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人原因，项目搁置了一段时间，继续更新：<br>前序文章：<br><a href="https://blog.csdn.net/tian330726/article/details/79681574" target="_blank" rel="noopener">1、环境搭建及测试</a>- - -<strong>附免费视频教程</strong><br><a href="https://blog.csdn.net/tian330726/article/details/79692046" target="_blank" rel="noopener">2、Logback配置与使用</a><br><a href="https://blog.csdn.net/tian330726/article/details/79955537" target="_blank" rel="noopener">3、店铺注册功能模块（一）</a><br>附上github地址：<a href="https://github.com/tyronczt/imooc-o2o" target="_blank" rel="noopener">https://github.com/tyronczt/imooc-o2o</a><br><a id="more"></a></p><h4 id="先上效果图："><a href="#先上效果图：" class="headerlink" title="先上效果图："></a>先上效果图：</h4><p><img src="http://img.tyronblog.com/0701-1.png" alt="提交成功"></p><h5 id="一、使用SUI-Mobile编写前端代码"><a href="#一、使用SUI-Mobile编写前端代码" class="headerlink" title="一、使用SUI Mobile编写前端代码"></a>一、使用SUI Mobile编写前端代码</h5><p>1、<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/main/webapp/WEB-INF/html/shop/shopoperation.html" target="_blank" rel="noopener">shopoperation.html</a><br>参照<a href="http://m.sui.taobao.org/" target="_blank" rel="noopener">SUI Mobile</a>官网示例，添加相应组件；<br>注意事项：将css写在头部，将js写在尾部，为了更好地用户体验。<br>2、<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/main/webapp/resources/js/shop/shopoperation.js" target="_blank" rel="noopener">shopoperation.js</a><br>实现店铺注册逻辑。<br>注意事项：注意<strong>单词的拼写</strong>，因为shopCategory手写缘故，拼错了，虽然有报错：Unrecognized field, not marked as ignorable，但是找了好久才找到错误所在，所以属性名能复制的尽量复制，另外在属性名定义上也要尽量规范。</p><h5 id="二、验证码功能的实现（kaptcha）"><a href="#二、验证码功能的实现（kaptcha）" class="headerlink" title="二、验证码功能的实现（kaptcha）"></a>二、验证码功能的实现（kaptcha）</h5><p>1、引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.github.penggle/kaptcha --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、添加Servlet，并配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;!-- 生成图片的Servlet --&gt;</span><br><span class="line">&lt;servlet-name&gt;Kaptcha&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;com.google.code.kaptcha.servlet.KaptchaServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!-- 是否有边框 --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;kaptcha.border&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;no&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt; </span><br><span class="line">&lt;!-- 参数配置 --&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;!-- 映射的url --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;Kaptcha&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/Kaptcha&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>3、页面中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 验证码 kaptcha --&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;div class=&quot;item-content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;item-inner&quot;&gt;</span><br><span class="line">&lt;div class=&quot;item-title label&quot;&gt;验证码&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;j_kaptcha&quot; placeholder=&quot;验证码&quot;&gt;</span><br><span class="line">&lt;div class=&quot;item-input&quot;&gt;</span><br><span class="line">&lt;img id=&quot;kaptcha_img&quot; alt=&quot;点击更换&quot; title=&quot;点击更换&quot;</span><br><span class="line">onclick=&quot;changeVerifyCode(this)&quot; src=&quot;../Kaptcha&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>4、js控制更换验证码逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function changeVerifyCode(img) &#123;</span><br><span class="line">img.src = &quot;../Kaptcha?&quot; + Math.floor(Math.random() * 100);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、后端校验验证码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static boolean checkVerifyCode(HttpServletRequest request) &#123;</span><br><span class="line">// 获取输入的校验码</span><br><span class="line">String verifyCodeActual = HttpServletRequestUtil.getString(request, &quot;verifyCodeActual&quot;);</span><br><span class="line">// 获取图片中的校验码</span><br><span class="line">String verifyCodeExpexted = (String) request.getSession().getAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">// 对比</span><br><span class="line">if (verifyCodeActual == null || !verifyCodeActual.equalsIgnoreCase(verifyCodeExpexted)) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人原因，项目搁置了一段时间，继续更新：&lt;br&gt;前序文章：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/tian330726/article/details/79681574&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1、环境搭建及测试&lt;/a&gt;- - -&lt;strong&gt;附免费视频教程&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/tian330726/article/details/79692046&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2、Logback配置与使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/tian330726/article/details/79955537&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3、店铺注册功能模块（一）&lt;/a&gt;&lt;br&gt;附上github地址：&lt;a href=&quot;https://github.com/tyronczt/imooc-o2o&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tyronczt/imooc-o2o&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssm" scheme="http://tyronblog.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>SSM到Spring Boot从零开发校园商铺平台---3、店铺注册功能模块（一）</title>
    <link href="http://tyronblog.com/2018/04/16/ssm2boot3/"/>
    <id>http://tyronblog.com/2018/04/16/ssm2boot3/</id>
    <published>2018-04-16T13:36:49.000Z</published>
    <updated>2019-02-19T11:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续更新校园商铺项目，由于店铺注册功能实现逻辑较长，分成两个部分讲述。<br>附上github地址：<a href="https://github.com/tyronczt/imooc-o2o" target="_blank" rel="noopener">https://github.com/tyronczt/imooc-o2o</a><br><a id="more"></a></p><h4 id="先上效果图："><a href="#先上效果图：" class="headerlink" title="先上效果图："></a>先上效果图：</h4><ol><li>前端页面<br><img src="http://img.tyronblog.com/0415%20%282%29.png" alt="前端页面"></li><li>店铺service测试<br><img src="http://img.tyronblog.com/0415%20%281%29.png" alt="店铺service测试"></li><li>水印图片<br><img src="http://img.tyronblog.com/0415%20%280%29.jpg" alt="水印图片"></li><li>店铺新增功能测试<br><img src="http://img.tyronblog.com/0415%20%283%29.png" alt="店铺新增功能测试"></li><li>店铺修改功能测试<br><img src="http://img.tyronblog.com/0415%20%284%29.png" alt="店铺更新功能测试"></li></ol><h4 id="具体代码逻辑视频中讲述很详细，我就不赘述了。此文主要讲述重要知识点，具体的代码实现可查看我的github地址。"><a href="#具体代码逻辑视频中讲述很详细，我就不赘述了。此文主要讲述重要知识点，具体的代码实现可查看我的github地址。" class="headerlink" title="具体代码逻辑视频中讲述很详细，我就不赘述了。此文主要讲述重要知识点，具体的代码实现可查看我的github地址。"></a>具体代码逻辑视频中讲述很详细，我就不赘述了。此文主要讲述重要知识点，具体的代码实现可查看我的<a href="https://github.com/tyronczt/imooc-o2o" target="_blank" rel="noopener">github地址</a>。</h4><h5 id="一、mybatis配置文件中添加自增主键"><a href="#一、mybatis配置文件中添加自增主键" class="headerlink" title="一、mybatis配置文件中添加自增主键"></a>一、mybatis配置文件中添加自增主键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mybatis-config.xml文件中</span><br><span class="line">&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">shopDao.xml文件中</span><br><span class="line">useGeneratedKeys=&quot;true&quot; keyColumn=&quot;shop_id&quot; keyProperty=&quot;shopId&quot;</span><br></pre></td></tr></table></figure><h5 id="二、dto层开发"><a href="#二、dto层开发" class="headerlink" title="二、dto层开发"></a>二、dto层开发</h5><p>dto层用于记录返回结果状态信息，详情可见<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/main/java/com/tyron/o2o/dto/ShopExecution.java" target="_blank" rel="noopener">ShopExecution.java</a></p><h5 id="三、service层之事务控制【重要】"><a href="#三、service层之事务控制【重要】" class="headerlink" title="三、service层之事务控制【重要】"></a>三、service层之事务控制【重要】</h5><p>店铺注册的逻辑中分为四步：①新增店铺信息；②返回店铺ID；③存储图片信息；④存储数据库<br>这是粗略的四个步骤，如果中间出错一步，整个过程将会回滚。注意：<strong>Spring事务管理中只对运行期异常（RunTimeException）进行事务回滚。</strong><br>思考一：代码中将RunTimeException进行封装，业务将更加清晰；<br>思考二：存储图片时，如未上传图片，应添加默认图片，逻辑更加合理。</p><h5 id="四、使用thumbnailator处理图片，并封装工具类及测试"><a href="#四、使用thumbnailator处理图片，并封装工具类及测试" class="headerlink" title="四、使用thumbnailator处理图片，并封装工具类及测试"></a>四、使用thumbnailator处理图片，并封装工具类及测试</h5><p>官方案例说明：<a href="https://github.com/coobird/thumbnailator/wiki/Examples" target="_blank" rel="noopener">coobird/thumbnailator</a><br>具体代码实现：</p><ul><li>测试类：<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/test/java/com/tyron/o2o/service/ShopServiceTest.java" target="_blank" rel="noopener">ShopServiceTest.java</a> - - -主要方法是：path2MultipartFile；</li><li>工具类：<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/main/java/com/tyron/o2o/util/ImageUtil.java" target="_blank" rel="noopener">ImageUtil.java</a>、<a href="https://github.com/tyronczt/imooc-o2o/blob/master/o2o/src/main/java/com/tyron/o2o/util/PathUtil.java" target="_blank" rel="noopener">PathUtil.java</a></li></ul><h5 id="五、使用SUI-Mobile编写前端代码"><a href="#五、使用SUI-Mobile编写前端代码" class="headerlink" title="五、使用SUI Mobile编写前端代码"></a>五、使用SUI Mobile编写前端代码</h5><p>SUI Mobile轻量，小巧且精美，能方便迅速搭建响应式前端页面，如效果图[1]所示。<br>前端功能逻辑实现中，将会在此系列文章第四篇中讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续更新校园商铺项目，由于店铺注册功能实现逻辑较长，分成两个部分讲述。&lt;br&gt;附上github地址：&lt;a href=&quot;https://github.com/tyronczt/imooc-o2o&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tyronczt/imooc-o2o&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssm" scheme="http://tyronblog.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Bye Hbjt，hi Zgy！</title>
    <link href="http://tyronblog.com/2018/04/02/hbjt2zgy/"/>
    <id>http://tyronblog.com/2018/04/02/hbjt2zgy/</id>
    <published>2018-04-02T15:03:57.000Z</published>
    <updated>2018-07-04T13:13:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>不多不少，不长不短，距上一篇公众号发布的文章刚刚好有一个月时间了。慢慢的去享受写文章的时刻，因为这变得越来越有仪式感了。<br><a id="more"></a></p><p>上一个月发生的事也许是我毕业三年以来工作上发生的最大改变了，为了这次的改变，我也准备了不少时间，把自己的基础知识重新打了一遍补丁，梳理了工作以来的工作经验，准备了面试中会可能会问到的问题等等，有时间和机会我也会将<code>面筋</code>与大家分享。</p><p><strong>没有人能随随便便成功。</strong>在毕业后工作的三年时间里，我承认我是很不够努力的，很大原因是自己不够上进，在安逸的环境中自得其乐，已经被同龄的开发者远远的甩在后面了，“温水煮青蛙”正生动形象地阐述了这个道理。如果非得说什么使我发生这样的改变，或许用这句话总结会比较贴切：“<strong>当意识到钱的重要性，并付诸行动的时候，你就会得到成长！</strong>”</p><p><strong>跳出井底，去看更广阔的世界。</strong>一直听说过也知道：越大的公司，公司的代码管理也将越规范，《阿里巴巴Java开发手册》便是一个很好的印证。但是如果不是真正进入“阿里巴巴”，也并不能真正了解代码规范真正的意义。虽然我现在的公司没有阿里巴巴那样的规模，但是从项目及代码的管理的角度而言，已经和原公司完全不是一个等级上了，这也是我想出去看看的很重要原因之一。</p><p>一次路途的结束，意味着另一次征途的开始。或许会在这新的征途中遇到大大小小的困难，但是我愿意去迎接这些挑战，给自己一个不悔的青春。</p><p><strong>一切，从仰望星空开始，由脚踏实地实现！     —–愿与诸君共勉。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不多不少，不长不短，距上一篇公众号发布的文章刚刚好有一个月时间了。慢慢的去享受写文章的时刻，因为这变得越来越有仪式感了。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
      <category term="月记" scheme="http://tyronblog.com/tags/%E6%9C%88%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SSM到Spring Boot从零开发校园商铺平台---2、Logback配置与使用</title>
    <link href="http://tyronblog.com/2018/03/25/ssm2boot2/"/>
    <id>http://tyronblog.com/2018/03/25/ssm2boot2/</id>
    <published>2018-03-25T15:00:32.000Z</published>
    <updated>2019-02-19T11:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续第二篇笔记—–Logback配置与使用，附上第一篇地址：<br><a href="https://blog.csdn.net/tian330726/article/details/79681574" target="_blank" rel="noopener">SSM到Spring Boot从零开发校园商铺平台—1、环境搭建及测试</a><br><a id="more"></a><br>先上效果图：<br><img src="http://img.tyronblog.com/0413%20%282%29.png" alt="日志输出"><br><img src="http://img.tyronblog.com/0413%20%283%29.png" alt="文档记录"></p><p>附上配置文件 <strong>logback.xml</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span><br><span class="line">scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 </span><br><span class="line">debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;</span><br><span class="line">&lt;!-- 定义参数常量 --&gt;</span><br><span class="line">&lt;!-- TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span><br><span class="line">&lt;property name=&quot;log.level&quot; value=&quot;debug&quot;/&gt;</span><br><span class="line">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br><span class="line">&lt;property name=&quot;log.maxHistory&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">&lt;!-- $&#123;catalina.base&#125;表示Tomcat实例的根目录 --&gt;</span><br><span class="line">&lt;property name=&quot;log.filePath&quot; value=&quot;$&#123;catalina.base&#125;/logs/webapp&quot;/&gt;</span><br><span class="line">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">&lt;property name=&quot;log.pattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;55&#125; -%msg%n&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 把日志输出到控制台 --&gt;</span><br><span class="line">&lt;appender name=&quot;consoleAppender&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">&lt;!-- 对日志进行格式化 --&gt;</span><br><span class="line">&lt;encoder&gt;</span><br><span class="line">&lt;pattern&gt;$&#123;log.pattern&#125;&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DEBUG --&gt;</span><br><span class="line">&lt;appender name=&quot;debugAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">&lt;!-- 文件路径 --&gt;</span><br><span class="line">&lt;file&gt;$&#123;log.filePath&#125;/debug.log&lt;/file&gt;</span><br><span class="line">&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; </span><br><span class="line">&lt;fileNamePattern&gt;$&#123;log.filePath&#125;/debug/debug.%d&#123;yyyy-MM-dd&#125;.log.gz&lt;/fileNamePattern&gt;</span><br><span class="line">&lt;!-- 文件最大保存历史数量  --&gt;</span><br><span class="line">&lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt;</span><br><span class="line">&lt;/rollingPolicy&gt;</span><br><span class="line">&lt;encoder&gt;</span><br><span class="line">&lt;pattern&gt;$&#123;log.pattern&#125;&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">&lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class="line">&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- INFO --&gt;</span><br><span class="line">&lt;appender name=&quot;infoAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">&lt;!-- 文件路径 --&gt;</span><br><span class="line">&lt;file&gt;$&#123;log.filePath&#125;/info.log&lt;/file&gt;</span><br><span class="line">&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; </span><br><span class="line">&lt;fileNamePattern&gt;$&#123;log.filePath&#125;/info/info.%d&#123;yyyy-MM-dd&#125;.log.gz&lt;/fileNamePattern&gt;</span><br><span class="line">&lt;!-- 文件最大保存历史数量  --&gt;</span><br><span class="line">&lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt;</span><br><span class="line">&lt;/rollingPolicy&gt;</span><br><span class="line">&lt;encoder&gt;</span><br><span class="line">&lt;pattern&gt;$&#123;log.pattern&#125;&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">&lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ERROR --&gt;</span><br><span class="line">&lt;appender name=&quot;errorAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">&lt;!-- 文件路径 --&gt;</span><br><span class="line">&lt;file&gt;$&#123;log.filePath&#125;/error.log&lt;/file&gt;</span><br><span class="line">&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; </span><br><span class="line">&lt;fileNamePattern&gt;$&#123;log.filePath&#125;/error/error.%d&#123;yyyy-MM-dd&#125;.log.gz&lt;/fileNamePattern&gt;</span><br><span class="line">&lt;!-- 文件最大保存历史数量  --&gt;</span><br><span class="line">&lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt;</span><br><span class="line">&lt;/rollingPolicy&gt;</span><br><span class="line">&lt;encoder&gt;</span><br><span class="line">&lt;pattern&gt;$&#123;log.pattern&#125;&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">&lt;level&gt;ERROR&lt;/level&gt;</span><br><span class="line">&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 存放日志对象 --&gt;</span><br><span class="line">&lt;logger name=&quot;com.tyron.o2o&quot; level=&quot;$&#123;log.level&#125;&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">&lt;appender-ref ref=&quot;debugAppender&quot;/&gt;</span><br><span class="line">&lt;appender-ref ref=&quot;infoAppender&quot;/&gt;</span><br><span class="line">&lt;appender-ref ref=&quot;errorAppender&quot;/&gt;</span><br><span class="line">&lt;/logger&gt;</span><br><span class="line">&lt;root level=&quot;info&quot;&gt;</span><br><span class="line">&lt;appender-ref ref=&quot;consoleAppender&quot;/&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续第二篇笔记—–Logback配置与使用，附上第一篇地址：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/tian330726/article/details/79681574&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSM到Spring Boot从零开发校园商铺平台—1、环境搭建及测试&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssm" scheme="http://tyronblog.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>SSM到Spring Boot从零开发校园商铺平台---1、环境搭建及测试</title>
    <link href="http://tyronblog.com/2018/03/24/ssm2boot1/"/>
    <id>http://tyronblog.com/2018/03/24/ssm2boot1/</id>
    <published>2018-03-24T14:35:38.000Z</published>
    <updated>2019-02-19T11:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据慕课网项目深入学习SSM和SpringBoot，练手中，将学习笔记做记录，后期会继续更新。<br>慕课网地址：<a href="https://coding.imooc.com/class/144.html" target="_blank" rel="noopener">SSM到Spring Boot-从零开发校园商铺平台-慕课网实战</a>，文末会附上免费视频地址！<br><a id="more"></a></p><p>先上效果图（此文讲述中最后要完成的结果）：<br><img src="http://img.tyronblog.com/0413%20%280%29.png" alt="效果图"><br><img src="http://img.tyronblog.com/0413%20%281%29.jpg" alt="项目图"></p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>慕课网中关于项目有详细的介绍，就不做过多的说明了。</p><h2 id="项目结构及配置文件说明"><a href="#项目结构及配置文件说明" class="headerlink" title="项目结构及配置文件说明"></a>项目结构及配置文件说明</h2><p>如题，项目初期采用SSM（Spring+SpringMVC+MyBatis）框架，按照项目加载过程逐一讲解配置文件：</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a><strong>pom.xml</strong></h3><p>项目使用Maven管理项目相关依赖，配置有Spring、mybatis、数据库、junit等依赖；</p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a><strong>web.xml</strong></h3><p>web项目的核心配置文件，主要配置了SSM的前置控制器DispatcherServlet，主要负责流程的控制；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml </span><br><span class="line">Mybatis - &gt; spring -&gt; springmvc --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">&lt;!-- 默认匹配所有的请求 --&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="spring-web-xml"><a href="#spring-web-xml" class="headerlink" title="spring-web.xml"></a><strong>spring-web.xml</strong></h3><p>主要配置SpringMVC：1）启用注解驱动；2）静态资源处理；3）配置视图解析器；4）扫描web相关的bean；5、后续权限拦截器的配置；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 两个标准配置 --&gt;</span><br><span class="line">&lt;!-- 1、启用注解驱动--&gt;  </span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;!-- 2、 可以正常访问静态文件，springmvc静态资源处理--&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3.定义视图解析器 --&gt;</span><br><span class="line">&lt;bean id=&quot;viewResolver&quot;  class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/html/&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.html&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.tyron.o2o.web&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a><strong>spring-service.xml</strong></h3><p>业务相关配置：1）扫描service相关的bean；2）配置事务管理器；3）配置基于注解的声明式事务；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1、 扫描service包下所有使用注解的类型 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.tyron.o2o.service&quot; /&gt;</span><br><span class="line">&lt;!-- 2、 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3、配置基于注解的声明式事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a><strong>spring-dao.xml</strong></h3><p>配置整合mybatis过程：1）配置数据库相关参数；2）配置数据库连接池；3）配置SqlSessionFactory对象；4）配置扫描Dao接口包，并注入；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;!-- 配置连接池属性 --&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot; /&gt;</span><br><span class="line">&lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line">&lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line">&lt;property name=&quot;checkoutTimeout&quot; value=&quot;10000&quot; /&gt;</span><br><span class="line">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line">&lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt;</span><br><span class="line">&lt;!-- 扫描entity包 使用别名 --&gt;</span><br><span class="line">&lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.tyron.o2o.entity&quot; /&gt;</span><br><span class="line">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span><br><span class="line">&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">&lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">&lt;property name=&quot;basePackage&quot; value=&quot;com.tyron.o2o.dao&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a><strong>mybatis-config.xml</strong></h3><p>配置mybatis的属性：1）驼峰命名转换；2）列别名替换列名；3）自增主键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt;</span><br><span class="line">&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用列别名替换列名 默认:true --&gt;</span><br><span class="line">&lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span><br><span class="line">&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></p><h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a><strong>jdbc.properties</strong></h3><p>设置数据库相关参数，并将username和password设置为密文；</p><h3 id="BaseTest-java"><a href="#BaseTest-java" class="headerlink" title="BaseTest.java"></a><strong>BaseTest.java</strong></h3><p>测试类的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 配置spring和junit整合，junit启动时加载springIOC容器 spring-test,junit</span><br><span class="line"> */</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123; &quot;classpath:spring/spring-dao.xml&quot;,</span><br><span class="line">&quot;classpath:spring/spring-service.xml&quot; &#125;)</span><br><span class="line">public class BaseTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上免费网盘地址：</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1htuUYqw" target="_blank" rel="noopener">https://pan.baidu.com/s/1htuUYqw</a> 密码: j1am<br>如失效，可关注我的公众号，回复“<strong>校园商铺</strong>”获取最新链接</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据慕课网项目深入学习SSM和SpringBoot，练手中，将学习笔记做记录，后期会继续更新。&lt;br&gt;慕课网地址：&lt;a href=&quot;https://coding.imooc.com/class/144.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSM到Spring Boot-从零开发校园商铺平台-慕课网实战&lt;/a&gt;，文末会附上免费视频地址！&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssm" scheme="http://tyronblog.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 注解总结</title>
    <link href="http://tyronblog.com/2018/03/04/SpringMVCAnnotation/"/>
    <id>http://tyronblog.com/2018/03/04/SpringMVCAnnotation/</id>
    <published>2018-03-04T09:26:49.000Z</published>
    <updated>2018-03-08T06:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>借鉴前人，简单对<code>Spring MVC</code>中的注解进行总结。<br><a id="more"></a></p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><blockquote><p>@RequestMapping用于处理请求地址映射（将请求映射到对应的控制器方法中），可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></blockquote><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><blockquote><p>@RequestParam用于将请求参数区数据映射到功能处理方法的参数上。</p></blockquote><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><blockquote><p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。</p></blockquote><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><blockquote><p>@ModelAttribute可以应用在方法参数上或方法上，它的作用主要是当注解在方法参数上时会将注解的参数对象添加到Model中；当注解在请求处理方法Action上时会将该方法变成一个非请求处理的方法，但其它Action被调用时会首先调用该方法。</p></blockquote><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><blockquote><p>在默认情况下，ModelMap中的属性作用域是request级别，也就是说，当本次请求结束后，ModelMap中的属性将销毁。如果希望在多个请求中共享ModelMap中的属性，必须将其属性转存到session中，这样ModelMap的属性才可以被跨请求访问。<br>    Spring 允许我们有选择地指定 ModelMap中的哪些属性需要转存到session 中，以便下一个请求属对应的 ModelMap 的属性列表中还能访问到这些属性。<br>    注：该注解不能放在方法上，只是放在类上。 </p></blockquote><h2 id="Responsebody"><a href="#Responsebody" class="headerlink" title="@Responsebody"></a>@Responsebody</h2><blockquote><p>@Responsebody表示该方法的返回结果直接写入HTTP response body中。一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。</p></blockquote><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><blockquote><p>@RequestBody将HTTP请求正文插入方法中,使用适合的HttpMessageConverter将请求体写入某个对象。</p></blockquote><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><blockquote><p>将请求的Cookie数据，映射到功能处理方法的参数上。</p></blockquote><h2 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h2><blockquote><p>定义处理器功能处理方法/异常处理器返回的状态码和原因。</p></blockquote><h2 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h2><blockquote><p>注解式声明异常处理器。</p></blockquote><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><blockquote><p>相当于@ResponseBody ＋ @Controller合在一起的作用。</p></blockquote><p>未完，待补充。。。</p><h2 id="参考-讲得很详细"><a href="#参考-讲得很详细" class="headerlink" title="参考[讲得很详细]"></a>参考[讲得很详细]</h2><ul><li><a href="https://www.cnblogs.com/xiaoxi/p/5718894.html" target="_blank" rel="noopener">springmvc 注解总结</a></li><li><a href="http://jinnianshilongnian.iteye.com/blog/1682510" target="_blank" rel="noopener">注解式控制器运行流程及处理器定义 第六章 注解式控制器详解——跟着开涛学SpringMVC</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借鉴前人，简单对&lt;code&gt;Spring MVC&lt;/code&gt;中的注解进行总结。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://tyronblog.com/tags/Java/"/>
    
      <category term="SpringMVC" scheme="http://tyronblog.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>用亚马逊云自己搭梯子</title>
    <link href="http://tyronblog.com/2018/02/24/awsToVPN/"/>
    <id>http://tyronblog.com/2018/02/24/awsToVPN/</id>
    <published>2018-02-24T04:45:24.000Z</published>
    <updated>2019-02-19T11:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>转眼农历新年已过，还想着新春在家空了可以看看书，事实证明自己太天真，在家忙(lan)的书都没翻开。。。<br>稍微空点了便写了此文，希望对大家有帮助。<br>自己动手，丰衣足食。自己搭个<code>免费</code>的梯子，看看GFW外发生的事情。<br>搭梯子分两步走，搭建不难，分分钟就可以搞定了。<br><a id="more"></a></p><h2 id="迈出第一步：注册亚马逊云账号，搭建服务器平台"><a href="#迈出第一步：注册亚马逊云账号，搭建服务器平台" class="headerlink" title="迈出第一步：注册亚马逊云账号，搭建服务器平台"></a>迈出第一步：注册亚马逊云账号，搭建服务器平台</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><blockquote><p>必要条件：一张信用卡。信用卡是支付预授权和押金所用，在你流量没用超的情况下（每月免费15G），一年后会返还。</p></blockquote><p>AWS官网：<a href="https://amazonaws-china.com/cn/" target="_blank" rel="noopener">https://amazonaws-china.com/cn/</a><br>点击右上角<code>注册</code>，输入邮箱密码及用户名，点击下一步，如图：<br><img src="http://img.tyronblog.com/aws-1.png" alt="注册用户-1"><br>下一步，填写自己的信用卡号和姓名，如果没有的话，可以去万能的某宝买一个虚拟信用卡：<br><img src="http://img.tyronblog.com/aws-3.png" alt="注册用户-2"><br>然后会要验证手机号，接收验证码填写即可：<br><img src="http://img.tyronblog.com/3.png" alt="注册用户-3"></p><h3 id="创建EC2实例"><a href="#创建EC2实例" class="headerlink" title="创建EC2实例"></a>创建EC2实例</h3><p>选择<code>免费</code>方案后，进入控制台，选择服务器所在区域<code>东京</code>,相对其他区域，东京延迟是最低的。<br><img src="http://img.tyronblog.com/5.png" alt="创建实例-1"><br>点击<code>启动实例</code>，然后下一步，建议选择Ubuntu的操作系统，创建<code>密钥对</code></p><blockquote><p>只有下载了密钥对才能启动实例，一定要保存好！</p></blockquote><p><img src="http://img.tyronblog.com/6.png" alt="创建实例-2"><br>点击<code>启动实例</code></p><h3 id="PuTTY连接EC2实例"><a href="#PuTTY连接EC2实例" class="headerlink" title="PuTTY连接EC2实例"></a>PuTTY连接EC2实例</h3><p>到控制台主页，点击<code>连接</code><br><img src="http://img.tyronblog.com/aws-4.png" alt="连接实例-1"><br>点击<code>使用PuTTY连接</code>，按照文档操作，很详细！</p><blockquote><p>官方文档是一手资料，一定要看！<br>最好的资料不用，自己去查资料，饶了不少弯路，慎记！！！</p></blockquote><p><img src="http://img.tyronblog.com/aws-5.png" alt="连接实例-2"></p><h2 id="踏出第二步：服务器安装Shadowsocks"><a href="#踏出第二步：服务器安装Shadowsocks" class="headerlink" title="踏出第二步：服务器安装Shadowsocks"></a>踏出第二步：服务器安装Shadowsocks</h2><p>站在巨人的肩膀上前行，可以让我们看得更远！<br>仰望<code>秋水逸冰</code>:<a href="https://teddysun.com/486.html" target="_blank" rel="noopener">Shadowsocks 一键安装脚本（四合一）</a></p><blockquote><p>自己也尝试了很长时间自己去搭建，但是会遇到各种莫名其妙的错误，也怪自己学艺不精，只能以崇拜的眼神用了这个好用的工具，学编程之路漫漫其修远兮，我要学的还有很多！</p></blockquote><p><strong>使用方法</strong><br>使用root用户登录，运行以下命令：</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    wget --no-check-certificate -O shadowsocks-all.sh https:<span class="comment">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span></span><br><span class="line">    </span><br><span class="line"> chmod +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-all.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></code></pre><p>之前装的好好的，这次重新装了以后就一直出现这个错误（中间就登上一次，已经截图在上面）：<br><img src="http://img.tyronblog.com/aws-6.png" alt="shadowsocks安装-1"><br>花了大半天的时间，也没解决（可能是文件权限的问题），最后决定曲线救国，使用Internet Explorer连接实例，如果提示更新java版本，更新便是。<br><img src="http://img.tyronblog.com/aws-8.png" alt="shadowsocks安装-2"><br><img src="http://img.tyronblog.com/aws-7.png" alt="shadowsocks安装-3"></p><p>安装成功^_^<br><img src="http://img.tyronblog.com/aws-9.png" alt="shadowsocks安装-4"></p><p>设置安全组<br><img src="http://img.tyronblog.com/aws-12.png" alt="shadowsocks安装-5"></p><h2 id="验证成果"><a href="#验证成果" class="headerlink" title="验证成果"></a>验证成果</h2><p>PC端（windows）下载Shadowsocks.exe <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a><br>更多可查看：<a href="https://github.com/shadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks</a><br><img src="http://img.tyronblog.com/aws-10.png" alt="成果展示-1"><br><img src="http://img.tyronblog.com/aws-11.png" alt="成果展示-2"></p><p>iphone端：下载FirstWingy<br><img src="http://img.tyronblog.com/aws-13.jpg" alt="成果展示-3"><br><img src="http://img.tyronblog.com/aws-14.jpg" alt="成果展示-4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼农历新年已过，还想着新春在家空了可以看看书，事实证明自己太天真，在家忙(lan)的书都没翻开。。。&lt;br&gt;稍微空点了便写了此文，希望对大家有帮助。&lt;br&gt;自己动手，丰衣足食。自己搭个&lt;code&gt;免费&lt;/code&gt;的梯子，看看GFW外发生的事情。&lt;br&gt;搭梯子分两步走，搭建不难，分分钟就可以搞定了。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tyronblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vpn" scheme="http://tyronblog.com/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的社交信用</title>
    <link href="http://tyronblog.com/2018/02/12/socialCredit/"/>
    <id>http://tyronblog.com/2018/02/12/socialCredit/</id>
    <published>2018-02-12T06:45:45.000Z</published>
    <updated>2018-02-12T06:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写此文的初衷</strong>：并非耿耿于怀上次事情「<a href="https://mp.weixin.qq.com/s?__biz=MzI4NTU5NDQ1Nw==&amp;mid=2247483887&amp;idx=1&amp;sn=04e5e577661e0b33f4019aff15497778&amp;chksm=ebe887d9dc9f0ecf35f2ac7d94d7626d7c023ad91620f36070185c2fe529e5ece09befcbb807#rd" target="_blank" rel="noopener">我的社交信用已透支</a>」，在写上一篇时就想表达更多的观点，碍于上一篇文章的故事完整性，加上自己后面的思考，便有了写这篇文章的冲动。<br><a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="370" height="86" src="//music.163.com/outchain/player?type=2&id=514765774&auto=0&height=66"></iframe><br><strong>一、社交很重要，信用尤珍贵。</strong></p><blockquote><p>要理解社交，需要抓住它的3个组成，归纳为“关系”、“内容”和“互动”。<br>这3者紧密相关，内容的生产会促进用户间互动，而用户间的互动直接影响用户间关系的建立；这样又会使新的内容产生。</p></blockquote><blockquote><p>—摘自 肖柯夫的《进入人本社交——社交网络的本质与发展趋势浅谈》</p></blockquote><p>良好的社交关系即代表了高分值的社交信用，当生产优秀内容的同时并与用户有效互动，这样三者就形成了一个良性循环，紧密关系，相互影响。</p><p><strong>二、为什么你的社交信用为0？</strong><br>如果有以下情况中的一条，你就要开始注意你的社交信用了：</p><ul><li>很多人屏蔽了你的朋友圈；</li><li>找别人帮忙时没人愿意搭理你；</li><li>别人已把你拉黑；</li></ul><p>有以上情况的你很有必要阅读第三点。<br><strong>三、怎样提升社交信用。</strong><br>主要从社交的三个要素来讲：</p><ul><li><p>输出有价值的内容<br>社交内容中的佼佼者—李叫兽，正是在移动社交中输出了有价值的内容，走出了一条通往牛人的道路，并获得了在他的年龄绝大部分的人不可能得到的人脉。<br>通过高质量、有价值的内容，得到别人对你的肯定，自然别人也会很希望主动认识你，这便是隐性的人脉资源，或许可以给你带来很大的帮助。</p></li><li><p>减少无效社交，争取有效社交<br>不用盲目的去加群，更不要在不认识对方且带着目的性轻易地去加对方好友。首先是加群的问题，相信大家都会把有些群设置成勿扰模式，请大家把未读消息上百而你也不会去看的不重要群退了，因为这不仅浪费了你宝贵的时间，而且也占用了你有限的手机空间。<br>再说下加好友的问题，这里的前提是不认识或者不了解对方的情况下，就算你加上了对方好友，最多也就是闲聊几句，也只能仅限于此了，这就是浪费时间，消耗社交信用的无效社交。反过来，你加别人好友之前，至少也应该看过对方的文章，通过文章先去了解对方。<br>有一个本人的社交方式（是不是有效还需要时间去证明）推荐：多去关注大牛们的公众号，技术的大牛们都是很愿意分享的（要不然GitHub也不会这么火），将自己的工作、生活分享在自己的公众号中，形成自己的IP。公众号虽好，但并不是所有的知识的来源地，它只能是碎片时间中获取知识的一个很好途径。如果想获取更系统的知识来源，可能博客会是一个很好的途径，强烈推荐阮一峰的博客，相见恨晚，而且还一直在更新！<br>先了解对方，与对方进行有效互动。说到有效互动，V2EX便秉承着这个理论，当你在文章下的评论无用消息时，会被扣除积分。通过公众号或者博客等形式与对方进行有效互动，这是每个对方都愿意看到的，如果还需要更进一步交流的话，对方也会很高兴加你好友^_^</p></li><li>胖子不是一口吃成的，社交信用也需要我们慢慢积累<br>好的社交习惯，能带给我们好的社交信用，进一步拓宽我们人脉。不要贪一些小便宜，去透支我们的社交信用，因为信用积累起来难，挥霍起来却很简单。</li></ul><p>最后引用Fenng的《谈谈社交信用》总结全文：</p><blockquote><p>最后，要有耐心。人若无名，专心练剑。剑成之后，自然诸事皆顺。急功近利要不得。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;写此文的初衷&lt;/strong&gt;：并非耿耿于怀上次事情「&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NTU5NDQ1Nw==&amp;amp;mid=2247483887&amp;amp;idx=1&amp;amp;sn=04e5e577661e0b33f4019aff15497778&amp;amp;chksm=ebe887d9dc9f0ecf35f2ac7d94d7626d7c023ad91620f36070185c2fe529e5ece09befcbb807#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的社交信用已透支&lt;/a&gt;」，在写上一篇时就想表达更多的观点，碍于上一篇文章的故事完整性，加上自己后面的思考，便有了写这篇文章的冲动。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="credit" scheme="http://tyronblog.com/tags/credit/"/>
    
  </entry>
  
  <entry>
    <title>今天又去爬山了</title>
    <link href="http://tyronblog.com/2018/02/03/climb-mountains/"/>
    <id>http://tyronblog.com/2018/02/03/climb-mountains/</id>
    <published>2018-02-03T15:41:41.000Z</published>
    <updated>2019-02-19T11:10:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是第三次参加dongze组织的爬山活动了。想较与前两次的活动，这次的活动感触更大，所以想写点东西记录一下。<br><a id="more"></a></p><p>先上两张美图：<br><img src="http://img.tyronblog.com/2018-02-03%20221853.jpg" alt="九溪2"></p><p><img src="http://img.tyronblog.com/2018-02-03%20221849.jpg" alt="九溪1"></p><p><strong>身体是革命的本钱，运动是健身的根本</strong>。作为经常坐办公桌前，面对着电脑的我们，运动显得尤为重要。所以我也会尽可能的找机会去通过运动锻炼自己的身体：在做好必要的保暖措施下，争取每天骑车上下班，享受出汗的感觉；公司组织的爬山活动也尽可能的参加（经常组织爬山活动，基本是西湖景区周边的路线）；经济和时间允许的情况下，参加健身课程等等。</p><p><strong>所谓工欲善其事，必先利其器</strong>，一个或多个好工具的重要性是不言而喻的。此次爬山中，也是因为自己的工具没准备到位影响了最后的名次。雪天爬山必备工具—登山杖，帮助平衡，山上的学雪没有融化，地面湿滑，可以有效防止脚步打滑，而且还可以减轻脚步和膝盖的负担；因为此次是团队性质的爬山比赛，有规定的路线，所以导航至关重要，这边推荐<code>六只脚</code>，很好用；出门在外，充电宝也变得必不可少了。</p><p><strong>团队协作</strong>能更好的完成任务。好的团队，能营造一种氛围，提高成员的效率，也不会产生孤独感。此次爬山过程中，也是和小伙伴一起，相互鼓励，相互协助，全程跑步两个多小时完成雪地十多公里的爬山任务。</p><p>此次爬山，虽然过程中会有一些累，但是结束时回过头去看，还是挺享受这样的过程的，既锻炼了自己的身体，而且还看到了这么美的风景，再次感谢此次活动的组织者，你们辛苦了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是第三次参加dongze组织的爬山活动了。想较与前两次的活动，这次的活动感触更大，所以想写点东西记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="life" scheme="http://tyronblog.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用进阶篇（一）</title>
    <link href="http://tyronblog.com/2018/02/01/hexoAdvanced1/"/>
    <id>http://tyronblog.com/2018/02/01/hexoAdvanced1/</id>
    <published>2018-02-01T11:03:14.000Z</published>
    <updated>2019-02-19T11:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> 豆瓣插件集成   </li><li style="list-style: none"><input type="checkbox" checked> 插入网易云音乐</li><li style="list-style: none"><input type="checkbox" checked> 插入图片的方式</li><li style="list-style: none"><input type="checkbox" checked> 支持https</li><li style="list-style: none"><input type="checkbox"> hexo-admin的集成</li><li style="list-style: none"><input type="checkbox"> markdown的使用</li><li style="list-style: none"><input type="checkbox"> 网站SEO<a id="more"></a></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="370" height="86" src="//music.163.com/outchain/player?type=2&id=532103415&auto=0&height=66"></iframe><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>或许是源于兴趣，在有空的时候便会想着去装扮装扮自己的博客。本文将一些有趣好用的插件和hexo使用心得做记录与大家分享。关于基础入门篇可以参考<a href="https://tyronblog.com/2018/01/18/first-article/">hexo入门篇</a>，希望对大家有帮助。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="豆瓣插件集成"><a href="#豆瓣插件集成" class="headerlink" title="豆瓣插件集成"></a>豆瓣插件集成</h3><p>这是我使用到现在最喜欢的一个插件，封装了豆瓣api，获取个人豆瓣读书、电影、游戏中的记录。<br>使用很简单，可参考<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">hexo-douban</a>。<br>该插件是一位在校生根据前人经验开发，佩服之至，有兴趣的话可看<a href="https://blog.mythsman.com/2017/06/17/1/" target="_blank" rel="noopener">hexo-douban插件的开发过程</a>。</p><h3 id="插入网易云音乐"><a href="#插入网易云音乐" class="headerlink" title="插入网易云音乐"></a>插入网易云音乐</h3><blockquote><p>个人比较习惯使用网易云音乐，用上手的了很难改变。另外在看文章的时候听一首好听的音乐，岂不美哉！</p></blockquote><p>具体使用方式：<br>①网页打开<a href="http://music.163.com/" title="网易云音乐" target="_blank" rel="noopener">网易云音乐</a>，搜索你想要的歌曲；<br>②在音乐播放页面中，在音乐头像下方有 <code>生成外链播放器</code>  的按钮；（有的音乐会提示“由于版权保护，无法生成外链。”，那就很可惜没办法使用网易云音乐的外链了，当然不止可以使用网易云音乐的外链，也可以使用其他的，会在后面的文章中讲解O(∩_∩)O）<br>③选择使用iframe插件，插入HTML代码，即可播放。</p><h3 id="插入图片的方式"><a href="#插入图片的方式" class="headerlink" title="插入图片的方式"></a>插入图片的方式</h3><blockquote><p>使用hexo中麻烦的一点就是插入图片（主要是非人民币玩家而言），需要先上传到存储，拿到地址后再插入Markdown文档中。</p></blockquote><p>我现在的插入图片方案：</p><h5 id="本地备份"><a href="#本地备份" class="headerlink" title="本地备份"></a>本地备份</h5><p>在自己电脑上将上传的图片放在一个文件夹中（留作以后网站迁移用）；</p><h5 id="七牛云对象存储"><a href="#七牛云对象存储" class="headerlink" title="七牛云对象存储"></a>七牛云对象存储</h5><p>使用方便，申请稍麻烦点。有优点也有缺点，优点是永久免费，缺点是空间只有10G，下图由七牛云存储上传：<br><img src="http://img.tyronblog.com/%E4%B8%83%E7%89%9B%E4%BA%91.png" alt="七牛云对象存储"></p><h5 id="阿里云对象存储"><a href="#阿里云对象存储" class="headerlink" title="阿里云对象存储"></a>阿里云对象存储</h5><p>使用方式和七牛云对象存储差不多，同样有优点和缺点，优点是使用空间有40G，缺点是使用时间为2年，下图由阿里云对象存储上传：<img src="https://tyron-blog.oss-cn-beijing.aliyuncs.com/hexo/aliyun-oss.png?Expires=1580482821&amp;OSSAccessKeyId=LTAIxIpnFmXmeVUr&amp;Signature=4Mg/i4mQPFQXe4qQfxxd0oWZ7xY=" alt="阿里云对象存储"><br>暂时方案是将图片放在七牛云上，10G用用已经差不多了，并本地备份。</p><h3 id="网站支持https"><a href="#网站支持https" class="headerlink" title="网站支持https"></a>网站支持https</h3><blockquote><p>改用https虽然会降低访问速度，但是基于长久运营和防止运营商网络劫持，避免被人强行插入广告的考虑，决定在建站初期将站点改成https。</p></blockquote><h5 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h5><p>在七牛云和阿里云都可以申请到免费的有效期一年的证书，我申请的是阿里云的免费证书；</p><h5 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h5><p>将证书上传到服务器，修改Nginx的配置文件，别忘了服务器的安全组中增加443端口。<br>具体操作可参考：<a href="https://ninghao.net/blog/4449" target="_blank" rel="noopener">用阿里云的免费 SSL 证书让网站从 HTTP 换成 HTTPS</a></p><h3 id="hexo-admin的集成"><a href="#hexo-admin的集成" class="headerlink" title="hexo-admin的集成"></a>hexo-admin的集成</h3><p>待完成项，方便后台管理，参考文档：<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">https://github.com/jaredly/hexo-admin</a></p><h3 id="markdown的使用"><a href="#markdown的使用" class="headerlink" title="markdown的使用"></a>markdown的使用</h3><blockquote><p>一直在学习中，经常使用后你也会爱上它！</p></blockquote><p>推荐文档：</p><ul><li><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">https://www.zybuluo.com/mdeditor</a></li></ul><h3 id="网站SEO"><a href="#网站SEO" class="headerlink" title="网站SEO"></a>网站SEO</h3><blockquote><p>网站主要还要以高质量的内容为主，做SEO只是为了让更多的人发现正在努力中的你我。<br>量变会发生质变，只是时间的问题！<br>话题太大，后面会写专门的文章来讲述我的seo之路。</p></blockquote><p>做seo当然少不了站长工具，先附一张站长工具截图：<br><img src="http://img.tyronblog.com/%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7.png" alt="站长工具"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这是hexo进阶篇的第一篇，后面会继续更新，敬请期待！<br>适合自己的才是最好的，多去实践，我们会发现更多更美更广的天空。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; 豆瓣插件集成   &lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; 插入网易云音乐&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; 插入图片的方式&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; 支持https&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; hexo-admin的集成&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; markdown的使用&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 网站SEO
    
    </summary>
    
      <category term="兴趣" scheme="http://tyronblog.com/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="hexo" scheme="http://tyronblog.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于看书和写作的一点思考</title>
    <link href="http://tyronblog.com/2018/01/28/writeAndThinking/"/>
    <id>http://tyronblog.com/2018/01/28/writeAndThinking/</id>
    <published>2018-01-28T10:59:46.000Z</published>
    <updated>2018-01-31T02:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>多读书、多看报；少点抱怨，多思考。<br>给自己多一点点思考的时间，给自己多一点点成长的空间。<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=530986975&auto=0&height=66"></iframe><p>&emsp;&emsp;应该是从小就养成的坏习惯：很少看书。基本上看的书都是有目的性的看书，比如教科书，辅导书等，很少是因为自己喜欢，或者感兴趣而去看一本书。这样的坏习惯导致现在我学习新的技术更多的是通过看视频去获取知识。</p><p>&emsp;&emsp;我也有努力在养成看书的习惯，但是在养成看书习惯前我先尝试着去写一些东西，写自己的一些思考，如工作遇到的问题及解决方案，如将学习的东西做一些总结，如看完电影或者书后写观后感及读后感（可访问<a href="http://tyron.xyz/books/" target="_blank" rel="noopener">我的阅读</a>和<a href="http://tyron.xyz/movies/" target="_blank" rel="noopener">我的电影</a>查看），如生活中的一点点感悟等等。</p><p>&emsp;&emsp;将思考、感悟后的点点记录下来，久而久之便会发现你的人生变长了。反之，我以前也总是会感叹时光飞逝，一年过去了似乎什么事都没做。当学会记录以后，我发现我的生活变得更加生动。最开始有这样的想法是在动笔写公众号的时候，那时候单纯的也就是想写些学习技术总结好加深自己的印象，慢慢的发现公众号的牛人还是很多的，不仅能完成自己手头工作的同时还能每天更新自己的原创文章，正所谓“别人比你优秀并不可怕，可怕的是他们比你优秀，比你聪明，比你强大，还比你更拼搏”。</p><p>&emsp;&emsp;学习路上让我最高兴的一件事莫过于是自己的博客搭建完成了。正是兴趣所致，自己空了的时候就会想着各种花样给她打扮打扮。也就是在前些天加上了我的阅读和我的电影链接，这是集成豆瓣的一个插件，做完后的一个感受是：你以前做的种种并不会白费，积少成多，最后量变会得到质变。。。我现在也争取把以前看过的书和电影的评论给补上。</p><p><strong>最后再谈谈现在做的接下来的看书、写作计划：</strong></p><ol><li>️基本以博客更新为主，其次是公众号、简书、csdn、掘金等平台部分同步更新。</li><li>多读书、多看报；少点抱怨，多思考。给自己定下看书计划，看的书主要包括技术书及心理书等，看完并及时总结。</li><li>️养成日记的习惯，将今天的所思所想记录，强迫自己多思考然后渐渐养成习惯（还在实践中）。</li><li>️放缓博文更新速度，至少周更，提高文章质量；并在保证质量的情况下，慢慢提高更新速度。</li></ol><p>最后附上一张自己的毛笔字。好久不练有些生疏，熟练方能生巧，任何事皆如此。（Ps:毛笔字内容与主题无关）<br><img src="https://wx3.sinaimg.cn/mw690/912285a1ly1fnwcl4791tj20qo0k07s0.jpg" alt="与主题无关"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多读书、多看报；少点抱怨，多思考。&lt;br&gt;给自己多一点点思考的时间，给自己多一点点成长的空间。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tyronblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="thinking" scheme="http://tyronblog.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github 终于有了自己的博客！</title>
    <link href="http://tyronblog.com/2018/01/18/first-article/"/>
    <id>http://tyronblog.com/2018/01/18/first-article/</id>
    <published>2018-01-18T05:42:20.000Z</published>
    <updated>2018-02-03T15:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客终于有了最初的雏形，兴奋之情难以言表。<br>搭建博客是我很早之前的一个小目标，在通过自己努力后终于迈开了小小的一步，兴奋之余便要着手准备把此博客好好运营下去。<br><a id="more"></a></p> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="370" height="86" src="//music.163.com/outchain/player?type=2&id=27785330&auto=0&height=66"></iframe><h2 id="为什么写博客？"><a href="#为什么写博客？" class="headerlink" title="为什么写博客？"></a>为什么写博客？</h2><blockquote><p><strong>摘自–刘未鹏–《暗时间》</strong><br>写一个博客有很多的好处，却没有任何明显的坏处。更明确的说：用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。Note：碎碎念不算思考，心情锁记不算思考，唠唠叨叨也不算思考，没话找话也不算思考，请以此类推。<br>写一个长期的价值博客最大的几点好处： </p><ol><li>能够交到很多志同道合的朋友。 书写是为了更好地思考。</li><li>“教”是最好的“学”。如果一件事情你不能讲清楚，十有八九你还没有完全理解。 </li><li>激励你去持续学习和思考。 </li><li>学会持之以恒地做一件事情。</li><li>一个长期的价值博客是一份很好的简历。</li></ol></blockquote><p>很赞同以上的观点，我也在慢慢实践中，有兴趣也可以阅读他写的《暗时间》以及<a href="http://mindhacks.cn/" target="_blank" rel="noopener">博客</a>。学习优秀的人，我们也会变得优秀。</p><h2 id="为什么选择用hexo？"><a href="#为什么选择用hexo？" class="headerlink" title="为什么选择用hexo？"></a>为什么选择用hexo？</h2><p>在技术选择上，第一个用到的便是WordPress，这个号称5秒钟建站的神器。给我的印象是上手简单，搭建快，扩展插件也很多，但是让我不能忍受的是加载速度慢，还有给人的感觉是很重，懒得去折腾和捣鼓，直接上手了hexo，界面简洁，加载速度快，支持Makedown，还支持部署到Github上。作为小白的我，既能学习Makedown的使用，也可以学着用用GitHub，好处多多。等熟悉使用了hexo后，下一阶段便是自己动手搭建个人博客，正所谓“自己动手，丰衣足食”，知其然，知其所以然，<a href="https://coding.imooc.com/class/125.html%20%E2%80%9CSpring%20Boot%E5%B8%A6%E5%89%8D%E5%90%8E%E7%AB%AF%20%E6%B8%90%E8%BF%9B%E5%BC%8F%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E2%80%9D" target="_blank" rel="noopener">视频教程</a>已找好，只等自己把这个教程的一些准备课程学习到位了。</p><h2 id="hexo的使用"><a href="#hexo的使用" class="headerlink" title="hexo的使用"></a>hexo的使用</h2><p>具体的使用操作，网上已经有很多教程，在这里给大家推荐几篇优秀文章供大家参考：</p><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT 使用文档</a> — 开发者文档是一手资料，推荐指数5颗星</li><li><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></li><li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a></li><li><a href="https://www.jianshu.com/p/15ae47eddc56" target="_blank" rel="noopener">小白独立搭建博客–Github Pages和Hexo简明教程</a></li><li><a href="https://note.leodev.me/2016/09/01/Hexo-3-1-1-Staic-Blog-Build-Guide/" target="_blank" rel="noopener">Hexo 3.1.1 静态博客搭建指南</a></li><li><a href="http://sobaigu.com/Hexo-git-to-vps.html" target="_blank" rel="noopener">Hexo博客Git-VPS部署完整记录</a></li></ul><h2 id="hexo安装中出现的问题"><a href="#hexo安装中出现的问题" class="headerlink" title="hexo安装中出现的问题"></a>hexo安装中出现的问题</h2><p> <strong>1. 出错描述</strong></p><pre><code>node: relocation error: node: symbol SSL_set_cert_cb, version libssl.so.10 not defined in file libssl.so.10 with link time reference</code></pre><p>亲测有效：<a href="https://stackoverflow.com/questions/46473376/node-relocation-error-node-symbol-ssl-set-cert-cb-version-libssl-so-10-not-d" target="_blank" rel="noopener">解决方案</a> <br></p><p> <strong>2. 万能方法</strong><br> ①使用搜索引擎，如百度，Google（<em>建议自己搭梯子</em>）等，很大一部分问题都能得到解决；<br> ②学会读异常，如在配置_config.yml文件时，经常会因为没有输入空格，导致网站无法显示，但是在hexo g是会提示第几行第几列出错的，要注意仔细阅读，并以此类推。<br> ③上面两种方法均无法解决问题，试了很多方法并不能奏效时，可是尝试向朋友或者相关博客中的作者提问，得到解决方案，做技术的在有人向他提问题时，除非是不动脑子的问题，一般都会回答你。如果大家在博客搭建中有相关问题，我们也可以一起讨论，文后有我公众号地址。</p><h2 id="域名和服务器选择"><a href="#域名和服务器选择" class="headerlink" title="域名和服务器选择"></a>域名和服务器选择</h2><p> <strong>1. 域名选择</strong><br><a href="http://tyron.xyz/" target="_blank" rel="noopener">tyron.xyz</a>，是用来过渡的域名，是因为它之前备案过，所以现在暂时用这个域名，tyronblog.com域名再过十天就会备案通过，以后会一直用tyronblog.com。<br>上述的两个域名均是在万网购买的，国内域名都要备案，可参考<a href="https://www.cnblogs.com/chenwolong/p/beian.html" target="_blank" rel="noopener">网站/域名如何备案？</a>如果嫌麻烦可以国外买域名，如<a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">GoDaddy</a>。<br><img src="https://tyron-blog.oss-cn-beijing.aliyuncs.com/hexo/%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88.png?Expires=1579578985&amp;OSSAccessKeyId=LTAIxIpnFmXmeVUr&amp;Signature=eO1AL5y7UR5t3FEqsBqIUDYEZ/g=" alt="tyron.xyz域名备案"><br>备案如同<strong>政审</strong>，大家自行体会吧。<br><br> <strong>2. 服务器选择</strong><br> 现在使用的是阿里云服务器，9元9使用半年，点击<a href="https://free.aliyun.com/?spm=5176.8499797.727319.5.04UbFW&amp;type=personal" target="_blank" rel="noopener">活动地址</a>，送了一大推服务，上面显示的图片就是用的oss对象存储，考虑到后期续费问题，也会把博客之前放到GitHub上。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>接下来也会更新一些hexo的进阶教程，主要是插件的使用，及博客的优化。</li><li>技术路上，当你知道越多的时候，发现不懂的也会越来越多，只要用心去探索，会感受到技术生动的一面，而且也会遇到一起努力学技术的你们。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客终于有了最初的雏形，兴奋之情难以言表。&lt;br&gt;搭建博客是我很早之前的一个小目标，在通过自己努力后终于迈开了小小的一步，兴奋之余便要着手准备把此博客好好运营下去。&lt;br&gt;
    
    </summary>
    
      <category term="兴趣" scheme="http://tyronblog.com/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="hexo" scheme="http://tyronblog.com/tags/hexo/"/>
    
  </entry>
  
</feed>
